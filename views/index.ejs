<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        .chessboard {
            display: grid;
            grid-template-columns: repeat(8, minmax(0, 1fr));
            grid-template-rows: repeat(8, minmax(0, 1fr));
            width: 400px;
            height: 400px;
            transform: rotate(0deg);
        }

        .piece.white {
            color: white;
            filter: drop-shadow(0 0 2px rgba(0, 0, 0, 1));
        }

        .piece.black {
            color: black;
        }

        .flipped {
            transform: rotate(180deg);
        }

        .square {
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .square.light {
            background-color: #f0d9b5;
        }

        .square.dark {
            background-color: #b58863;
        }

        .piece {
            font-size: 36px;
            cursor: pointer;
        }

        .piece.draggable {
            cursor: grab;
        }

        .dragging {
            opacity: 0.5;
        }

        /* Rotate pieces for black player */
        .flipped .piece {
            transform: rotate(180deg);
        }
    </style>  
</head>
<body>
    <div class="w-full h-screen flex items-center justify-center bg-zinc-900">
        <div class="chessboard w-96 h-96 bg-red-800">


        </div>
    </div>

    
    <script src="/socket.io/socket.io.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/chess.js/0.10.3/chess.min.js" integrity="sha512-xRllwz2gdZciIB+AkEbeq+gVhX8VB8XsfqeFbUh+SzHlN96dEduwtTuVuc2u9EROlmW9+yhRlxjif66ORpsgVA==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>

    <script>
        const socket = io();
        const chess = new Chess();
        const boardElement = document.querySelector(".chessboard");

        let draggedPiece = null;
        let sourceSquare = null;
        let playerRole = null;

        const renderBoard = () => {
            const board = chess.board();
            boardElement.innerHTML= "";
            board.forEach((row, rowindex) => {
                row.forEach((square,squareindex) => {
                    const squareElement = document.createElement('div');
                    squareElement.classList.add("square", 
                        (rowindex + squareindex)%2 === 0 ? "light" : "dark",
                    );
                    squareElement.dataset.row = rowindex;
                    squareElement.dataset.col = squareindex;

                    if(square) {
                        const pieceElement = document.createElement('div');
                        pieceElement.classList.add("piece",square.color === 'w' ? "white":"black",);

                        pieceElement.innerText = getPieceUnicode(square);

                        pieceElement.draggable = playerRole === square.color;
                        pieceElement.addEventListener('dragstart', (event) => {
                            if(pieceElement.draggable){
                                draggedPiece = pieceElement;
                                sourceSquare = {row : rowindex, col: squareindex};
                                event.dataTransfer.setData('text/plain',"");
                            } 
                        });

                        pieceElement.addEventListener("dragend", (e) => {
                            draggedPiece = null;
                            sourceSquare = null;
                        });

                        squareElement.appendChild(pieceElement);
                    }

                    squareElement.addEventListener('dragover', function(e) {
                        e.preventDefault();
                    });
                    squareElement.addEventListener('drop', (e) => {
                        e.preventDefault();
                        if(draggedPiece){
                            const targetSource = {
                                row: parseInt(squareElement.dataset.row) ,
                                col: parseInt(squareElement.dataset.col)
                            };

                            handleMove(sourceSquare,targetSource);
                        };

                    })
                    boardElement.appendChild(squareElement);
                })
            })
            
            if(playerRole == 'b'){
                boardElement.classList.add('flipped');

            }
            else{
                boardElement.classList.remove('flipped');
            }
        };

        const handleMove = (source,target) => {
            const move = {
                from: `${String.fromCharCode(97+source.col)}${8- source.row}`,
                to: `${String.fromCharCode(97+target.col)}${8- target.row}`,
                promotion: 'q'
            };

            socket.emit('move',move);
        };

        const getPieceUnicode = (piece) => {
            const unicodePieces = {
                p:"♙",
                r:"♜",
                n:"♞",
                b:"♝",
                q:"♛",
                k:"♚",
                P:"♙",
                R:"♖",
                N:"♘",
                B:"♗",
                Q:"♕",
                K:"♔",
            };

            return unicodePieces[piece.type] || "";
        };

        socket.on('playerRole', function(role) {
            playerRole = role;
            renderBoard();
        });

        socket.on('spectatorRole', function() {
            playerRole = null;
            renderBoard();
        });

        socket.on("boardState",function(fen){
            chess.load(fen);
            renderBoard();
        })

        socket.on("move", function(move){
            chess.move(move);
            renderBoard();
        })

        renderBoard();








        
    </script>
</body>
</html>